### YamlMime:Tutorial
title: "Chaînes interpolées en C#"
metadata:
  title: "Chaînes interpolées en C#. Découvrez comment construire une chaîne qui comprend d’autres valeurs, telles que des dates ou des nombres."
  description: "Dans ce didacticiel, vous allez utiliser la fonctionnalité de chaîne interpolée C# de manière interactive dans votre navigateur. Vous allez écrire un code C# et afficher les résultats de la compilation et de l’exécution du code directement dans le navigateur."
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: Collections en C#
  ms.openlocfilehash: f54d8e5e3703556b333155fd9541f9d7c7e7fd1b
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 2
  content: "Ce guide de démarrage rapide explique comment utiliser des chaînes interpolées en C# pour insérer de manière interactive des valeurs dans une chaîne à sortie unique. En utilisant votre navigateur pour écrire du code C#, vous pouvez voir immédiatement les résultats de la compilation et de l’exécution de votre code. Le guide de démarrage rapide contient une série de leçons qui concatènent des chaînes, insèrent des valeurs dans des chaînes et mettent en forme ces valeurs de différentes façons.\n"
- title: "Créer une chaîne interpolée"
  durationInMinutes: 2
  content: "Exécutez le code suivant dans la fenêtre interactive. Pour ce faire, tapez le bloc de code suivant dans la fenêtre interactive (remplacez « \\<name> » par votre nom) et cliquez sur le bouton **Exécuter** :\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nQuand vous exécutez le programme, celui-ci affiche une chaîne unique qui inclut votre nom dans le message d’accueil. La chaîne qui se trouve dans l’appel de méthode <xref:System.Console.WriteLine%2A> est une *chaîne interpolée*. C’est un genre de modèle qui vous permet de construire une chaîne unique (appelée *chaîne de résultat*) à partir d’une chaîne qui comprend du code incorporé. Les chaînes interpolées sont particulièrement utiles pour insérer des valeurs dans une chaîne ou pour concaténer (joindre) des chaînes. \n\nCet exemple simple contient les deux éléments que chaque chaîne interpolée doit avoir : \n\n- Un littéral de chaîne qui commence par le caractère `$` avant ses guillemets ouvrants. Il ne peut pas y avoir d’espace entre le symbole `$` et les guillemets. (Si vous voulez voir ce qui se passe si vous en incluez un, insérez un espace après le caractère `$` dans la fenêtre interactive et cliquez sur le bouton **Exécuter**. Le compilateur C# affiche un message d’erreur : « Caractère inattendu '$' ».) \n\n- Une ou plusieurs *expressions interpolées*. Une expression interpolée est indiquée par des accolades ouvrantes et fermantes (`{` et `}`). Vous pouvez placer n’importe quelle expression C# qui retourne une valeur (notamment `null`) à l’intérieur des accolades. \n\nEssayons quelques autres exemples de chaînes interpolées avec d’autres types de données.\n\n> [!NOTE]\n> Cette expérience de code en ligne est en mode preview. Si vous rencontrez des problèmes, veuillez les signaler [sur le dépôt dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Inclure différents types de données"
  durationInMinutes: 3
  content: "Dans le guide de démarrage rapide précédent, vous avez utilisé une chaîne interpolée pour insérer une chaîne à l’intérieur d’une autre. Une expression de chaîne interpolée peut toutefois être de n’importe quel type de données. Essayons une chaîne interpolée qui a des valeurs de plusieurs types de données. \n\nL’exemple suivant comprend des expressions interpolées avec un objet `Vegetable`, un membre de l’énumération `Unit`, une valeur <xref:System.DateTime> et une valeur <xref:System.Decimal>. Exécutez-le dans la fenêtre interactive.\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\nNotez que l’une des expressions interpolées comprend l’objet `item` dans la chaîne de résultat affichée dans la console, et dans ce cas la chaîne « eggplant » est insérée dans la chaîne de résultat. Cela est dû au fait que quand le type d’une expression interpolée n’est pas une chaîne, le compilateur Visual C# effectue les opérations suivantes :\n\n- Si l’expression interpolée est `null`, elle retourne une chaîne vide (« », ou <xref:System.String.Empty?displayProperty=nameWithType>).\n\n- Si l’expression interpolée n’est pas `null`, la méthode `ToString` du type de l’expression interpolée est appelée. Vous pouvez tester cela en commentant la définition de la méthode `Vegetable.ToString` dans l’exemple en plaçant un symbole de commentaire (`//`) devant elle. Dans la sortie, la chaîne « eggplant » est remplacée par le nom de type qualifié complet (l’espace de noms défini par la boucle REPL C#, plus le nom de type), ce qui est le comportement par défaut de la méthode <xref:System.Object.ToString?displayProperty=nameWithType>.   \n\nDans la sortie de cet exemple, la date est trop précise (le prix des aubergines ne varie pas chaque seconde) et la valeur du prix n’indique pas de monnaie locale. À l’étape suivante, vous découvrirez comment résoudre ces problèmes en contrôlant le format des chaînes retournées par les expressions interpolées.\n\n> [!NOTE]\n> Cette expérience de code en ligne est en mode preview. Si vous rencontrez des problèmes, veuillez les signaler [sur le dépôt dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Contrôler la mise en forme des expressions interpolées"
  durationInMinutes: 5
  content: "Dans la leçon précédente, deux chaînes à la mise en forme incorrecte ont été insérées dans la chaîne de résultat. L’une était une valeur de date et d’heure pour laquelle seule la date était appropriée. La deuxième était un prix qui n’indiquait pas la monnaie locale. Ces deux problèmes sont faciles à résoudre. Les expressions interpolées peuvent inclure des *chaînes de format* qui gèrent la mise en forme de types particuliers. Modifiez l’appel à `Console.WriteLine` dans l’exemple précédent de façon à inclure le spécificateur de format pour les champs de date et de prix, comme indiqué sur la ligne suivante :\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\nVous spécifiez une chaîne de format en plaçant après l’expression interpolée un signe deux-points et la chaîne de format. « d » est une [chaîne de format de date et d’heure standard](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) qui représente le format de date courte. « C2 » est une [chaîne de format numérique standard](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) qui représente un nombre sous forme de valeur monétaire avec deux chiffres après la virgule.\n\nPlusieurs types dans les bibliothèques .NET Standard prennent en charge un ensemble prédéfini de chaînes de format. Il s’agit notamment de tous les types numériques et des types de date et d’heure. Pour obtenir une liste complète des types qui prennent en charge les chaînes de format, consultez [Chaînes de format et types de bibliothèque de classes .NET](../../standard/base-types/formatting-types.md#stringRef) dans l’article [Mise en forme des types dans .NET](../../standard/base-types/formatting-types.md). Tout type peut prendre en charge un ensemble de chaînes de format, et vous pouvez également développer des extensions de mise en forme personnalisées qui fournissent une mise en forme personnalisée pour des types existants. Pour plus d’informations sur la mise en forme personnalisée à l’aide d’une implémentation<xref:System.ICustomFormatter>, consultez [Mise en forme personnalisée avec ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) dans l’article [Mise en forme des types dans .NET](../../standard/base-types/formatting-types.md).\n\nEssayez de modifier les chaînes de format dans **l’Éditeur .NET** pour voir comment elles affectent la mise en forme de la date et de l’heure et la valeur numérique. Remplacez le « d » dans `{date:d}` par « t » (pour afficher le format d’heure courte), « y » (pour afficher l’année et mois) et « yyyy » (pour afficher l’année sous forme de nombre à quatre chiffres). Remplacez le « C2 » dans `{price:C2}` par « e » (pour la notation exponentielle) et « F3 » (pour une valeur numérique avec trois chiffres après la virgule).\n\nEn plus de la mise en forme, vous pouvez aussi contrôler la largeur de champ et l’alignement des chaînes retournées par une expression interpolée. À l’étape suivante, vous allez découvrir comment effectuer cette opération.\n\n> [!NOTE]\n> Cette expérience de code en ligne est en mode preview. Si vous rencontrez des problèmes, veuillez les signaler [sur le dépôt dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Contrôler la largeur de champ et l’alignement des expressions interpolées"
  durationInMinutes: 6
  content: "En règle générale, quand la chaîne retournée par une expression interpolée est comprise dans une chaîne de résultat, elle ne comporte aucun espace de début ou de fin. En particulier pour les instances dans lesquelles vous travaillez avec un jeu de données, les expressions interpolées vous permettent de spécifier la largeur d’un champ et son alignement. Pour observer cela, exécutez le code suivant.\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\nLes noms des éléments sont alignés à gauche, tandis que leurs quantités sont alignées à droite. Vous spécifiez l’alignement en ajoutant une virgule (« , ») après l’expression et en spécifiant la largeur du champ. Si la largeur du champ est un nombre positif, le champ est aligné à droite :\n\n```text\n{expression, width}\n```\n\nSi la largeur du champ est un nombre négatif, le champ est aligné à gauche :\n\n```text\n{expression, -width}\n```\nEssayez de supprimer les signes négatifs des expressions interpolées `{\"Item\",-25}` et `{item.Key,-25}`, puis réexécutez l’exemple. Cette fois, le nom de l’élément est aligné à droite.\n\nVous pouvez combiner une largeur de champ et une chaîne de format dans une même expression interpolée. La largeur du champ figure en premier, suivie d’un signe deux-points et de la chaîne de format. Essayez ce programme simple qui affiche trois chaînes mises en forme avec des largeurs de champs définies.\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> Cette expérience de code en ligne est en mode preview. Si vous rencontrez des problèmes, veuillez les signaler [sur le dépôt dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: "Vous avez terminé le guide de démarrage rapide sur les chaînes interpolées. \n\nVous pouvez poursuivre ces guides de démarrage rapide dans votre propre environnement de développement local. Découvrez les principes fondamentaux du [développement local](local-environment.md) puis choisissez un guide de démarrage rapide. Vous pouvez essayer ce même exercice, passer directement au guide de démarrage rapide suivant, ou recommencer à partir du guide de démarrage rapide sur les [nombres en C#](numbers-in-csharp-local.md).\n\nPlus d’informations sur l’utilisation des chaînes interpolées, consultez la rubrique [Chaînes interpolées](../language-reference/keywords/interpolated-strings.md) dans les informations de référence sur C#.\0"
